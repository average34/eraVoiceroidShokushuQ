;共通処理など
;一覧
;	@POWER_D(ARG:0, ARG:1)								小数の指数計算。例えば1.1^2が欲しい場合、(11, 2)を渡すと、121(実際の値の100倍。小数第二位まで計算してると思って)が返ってくる。
;	@PRINT_TIME(ARG:0)									秒数を渡すとhh:mm:ss表記の文字列に変換
;	@ASK_YN												「はい」/「いいえ」の２択を表示
;	@GET_BATTLE_POW(ARG:0)								補正済み戦闘素質を計算
;	@GET_CENTER_ROOM									「4隅以外の部屋」をランダムに取得
;	@CONVERT_TIME										TIMEを文字に変換
;	@CHECK_NEXT(ARG:0, ARG:1)							隣の部屋かどうかを判定
;	@CHECK_FINE(ARG:0)									行動可能チェック
;	@GET_PT_MAX_ABL(ARG:0)								PT内での最大レベルを取得
;	@PRINT_LCL(ARG:0, ARGS:0)							改行しつつ出力
;	@HEART_BREAK(ARG:0)									戦意喪失処理
;	@TACHI												PTの「達」表示用
;	@SELECT_PT_TARGET(ARG:0)							味方の中から１人を選択
;	@SELECT_PT_TARGET2(ARG:0)							味方の中から１人を選択(大きいバージョン)
;	@MSG_WAIT(ARG:0)									メッセージスキップ処理
;	@IN_PT(ARG:0)										PT内に居るかどうかチェック
;	@CHECK_ENEMY_EXIST(ARG:0, ARG:1 = 0)				指定した部屋に指定した敵がいるか確かめる　引数を省略したときは指定した部屋に敵がいるかを判定する
;	@GET_ENEMY_EXIST(ARG:0, 敵キャラ数, 一番強い敵)		指定した部屋にいる敵を取得する　なんか、上の関数を改造する必要なかったっぽい
;	@CHECK_CHARA_EXIST(ARG:0, ARG:1 = 0)				指定した部屋に指定した味方がいるか確かめる　引数を省略したときは指定した部屋に味方がいるかを判定する
;	@GET_ENEMY_EXIST(ARG:0, 味方キャラ数, 一番若い味方)	指定した部屋にいる味方を取得する　なんか、上の関数を（ｒｙ
;	@COMPARE_POWER(ARG:0, ARG:1)						敵の強さとNPCの強さを比較する関数　要改良
;	@GET_NPC_POWER(ARG:0)								NPCの強さを勝手に決めつける関数　要改良
;	@GET_ENEMY_POWER(ARG:0)								敵の強さを勝手に決めつける関数　要改良
;	@MAXENEMY											敵の最大湧き量を返す関数
;	@GET_CSVCHARA										現在のCSV数を返す

;指数計算(小数入り)
;ARG:0	元の数。小数を想定するので、実際の値の100倍を渡すこと
;ARG:1	何乗するか
;戻り値	計算結果。小数点第２位まで計算するので、実際の値の100倍を返す
@POWER_D(ARG:0, ARG:1)
#FUNCTION
IF ARG:1 <= 0
	;面倒だから負の数全部0乗扱い
	RETURNF 100
ELSEIF ARG:1 == 1
	RETURNF ARG:0
ENDIF

LOCAL:1 = ARG:0 * 100
FOR LOCAL:0, 1, ARG:1
	LOCAL:1 = LOCAL:1 * ARG:0 / 100
NEXT

RETURNF (LOCAL:1 / 100)


;プレイ時間表示
;ARG:0	プレイ時間(秒数)
;戻り値	表示する時間。hh:mm:ss表記
@PRINT_TIME(ARG:0)
#FUNCTIONS

;時
LOCAL:0 = ARG:0 / 3600

;分
LOCAL:1 = (ARG:0 % 3600) / 60

;秒
LOCAL:2 = ARG:0 % 60

FOR LOCAL:3, 0, 3
	IF LOCAL:(LOCAL:3) < 10
		LOCALS:(LOCAL:3) = {0}{LOCAL:(LOCAL:3)}
	ELSE
		LOCALS:(LOCAL:3) = {LOCAL:(LOCAL:3)}
	ENDIF
NEXT

RETURNF (LOCALS:0 + ":" + LOCALS:1 + ":" + LOCALS:2)


;「はい」/「いいえ」の２択を表示
@ASK_YN

PRINTFORML [0] はい
PRINTFORML [1] いいえ

$INPUT_LOOP
INPUT
IF RESULT == 0
	RETURN 0
ELSEIF RESULT == 1
	RETURN 1
ELSE
	REUSELASTLINE 入力値が不正です。再入力してください
	GOTO INPUT_LOOP
ENDIF

;ここに来ることは無いはずだけど、一応0を返す
RETURN 0


;補正済み戦闘素質を計算
;ARG:0	対象キャラID
@GET_BATTLE_POW(ARG:0)
#FUNCTION

LOCAL:0 = ABL:(ARG:0):98

IF ABL:(ARG:0):3 == 1
	LOCAL:0 = LOCAL:0 * 12 / 10
ELSEIF ABL:(ARG:0):3 == 2
	LOCAL:0 = LOCAL:0 * 15 / 10
ELSEIF ABL:(ARG:0):3 == 3
	LOCAL:0 = LOCAL:0 * 20 / 10
ENDIF

RETURNF LOCAL:0


;「4隅以外の部屋」を取得
@GET_CENTER_ROOM
#FUNCTION

LOCAL:0 = RAND:26 + 1

;四隅（1,5,26,30）回避
IF LOCAL:0 == 1
	LOCAL:0 = 27
ELSEIF LOCAL:0 == 5
	LOCAL:0 = 28
ELSEIF LOCAL:0 == 26
	LOCAL:0 = 29
ENDIF

RETURNF LOCAL:0


;TIMEを文字に変換
@CONVERT_TIME
#FUNCTIONS

IF TIME:0 == 0
	LOCALS:0 = 朝
ELSEIF TIME:0 == 1
	LOCALS:0 = 昼
ELSEIF TIME:0 == 2
	LOCALS:0 = 夕
ELSE
	LOCALS:0 = 夜
ENDIF

RETURNF LOCALS:0


;隣の部屋かどうかを判定
;ARG:0	調べたい部屋番号
;ARG:1	調べたい部屋番号２
;戻り値	0：離れている　1：隣だが移動不可能　2：隣で移動可能
@CHECK_NEXT(ARG:0, ARG:1)
#FUNCTION
;LOCAL
;0	LOOP
;1	戻り値
;2	通路ID補正値
;3	部屋の左にある通路のID

LOCAL:1 = 0

IF (ARG:0 % 5) == 0
	;部屋番号が5の倍数＝右端の部屋
	SIF (ARG:0 == ARG:1 + 1) || (ARG:0 == ARG:1 - 5) || (ARG:0 == ARG:1 + 5)
		LOCAL:1 = 1
ELSEIF (ARG:0 % 5) == 1
	;部屋番号が5の倍数+1＝左端の部屋
	SIF (ARG:0 == ARG:1 - 1) || (ARG:0 == ARG:1 - 5) || (ARG:0 == ARG:1 + 5)
		LOCAL:1 = 1
ELSE
	;その他
	SIF (ARG:0 == ARG:1 - 1) || (ARG:0 == ARG:1 + 1) || (ARG:0 == ARG:1 - 5) || (ARG:0 == ARG:1 + 5)
		LOCAL:1 = 1
ENDIF

IF LOCAL:1
	;隣の部屋の場合、つながっているかどうかチェック
	LOCAL:2 = ARG:1 - ARG:0
	SIF LOCAL:2 < 0
		LOCAL:2 += 1

	LOCAL:3 = ARG:0 - 2 + ((ARG:0 - 1) / 5 * 4)

	SIF FLAG:(300 + LOCAL:2 + LOCAL:3)
		LOCAL:1 = 2
ENDIF

RETURNF LOCAL:1


;行動可能チェック
;ARG:0	対象キャラID
@CHECK_FINE(ARG:0)
#FUNCTION

;行動できなさそうなフラグが立っていれば、0を返す
SIF CFLAG:(ARG:0):10 || CFLAG:(ARG:0):20 || CFLAG:(ARG:0):21 || CFLAG:(ARG:0):25 || CFLAG:(ARG:0):29 || CFLAG:(ARG:0):2 || CFLAG:(ARG:0):3
	RETURNF 0

;特に問題なければ１を返す
RETURNF 1


;PT内での最大レベルを取得
;ARG:0	調べたいABL
@GET_PT_MAX_ABL(ARG:0)
#FUNCTION
;LOCAL
;0	LOOP
;1	RETURN

LOCAL:1 = 0

FOR LOCAL:0, 1, CHARANUM
	SIF LOCAL:0 != 1 && LOCAL:0 != FLAG:10 && LOCAL:0 != FLAG:11
		CONTINUE
	
	IF CHECK_FINE(LOCAL:0)
		SIF ABL:(LOCAL:0):(ARG:0) > LOCAL:1
			LOCAL:1 = ABL:(LOCAL:0):(ARG:0)
	ENDIF
NEXT

RETURNF LOCAL:1



;改行しつつ出力
;ARG:0	0:通常　1:カウンタ初期化　2:終了処理
;ARG:1	出力文字列
@PRINT_LCL(ARG:0, ARGS:0)
IF ARG:0 == 1
	LOCAL:0 = 0
	RETURN
ENDIF
IF ARG:0 == 2
	;3つ目まで出力が終わっていれば改行しない
	SIF LOCAL:0 % 3 != 0
		PRINTL 
	RETURN
ENDIF

PRINTFORMLC %ARGS:0%
LOCAL:0 += 1
SIF LOCAL:0 % 3 == 0
	PRINTL 


;戦意喪失処理
;ARG:0	対象キャラ
@HEART_BREAK(ARG:0)

CFLAG:(ARG:0):29 = 1
BASE:(ARG:0):4 = 0
SIF FLAG:20 == 0
	CALL PRINT_MESSAGE(ARG:0, 33, 0, CALLNAME:(ARG:0), "")

;PTメンバーだった場合、他のキャラのTP変動
IF ARG:0 == 1 || ARG:0 == FLAG:10 || ARG:0 == FLAG:11
	CALL ADD_FEELING(ARG:0, -10)
	SIF ARG:0 != 1
		CALL CHANGE_TP(1, 20)
	SIF FLAG:10 != 0 && ARG:0 != FLAG:10
		CALL CHANGE_TP(FLAG:10, 20)
	SIF FLAG:11 != 0 && ARG:0 != FLAG:11
		CALL CHANGE_TP(FLAG:11, 20)
	CALL SHOW_TUTORIAL(12)
ENDIF

;HP用途拡張パッチ
;触手になんて絶対負けない処理
;ARG:0	対象キャラ
@IRON_HEART(ARG:0)

CFLAG:(ARG:0):29 = 0
BASE:(ARG:0):4 = 1
SIF FLAG:20 == 0
	CALL PRINT_MESSAGE(ARG:0, 64, 0, CALLNAME:(ARG:0), "")

;耐えようとしたけどやっぱり触手には勝てなかったよ処理（戦意喪失とほぼ一緒）
;ARG:0	対象キャラ
@HEART_OVER_BREAK(ARG:0)

CFLAG:(ARG:0):29 = 1
BASE:(ARG:0):4 = 0
SIF FLAG:20 == 0
	CALL PRINT_MESSAGE(ARG:0, 33, 1, CALLNAME:(ARG:0), "")

;PTメンバーだった場合、他のキャラのTP変動
IF ARG:0 == 1 || ARG:0 == FLAG:10 || ARG:0 == FLAG:11
	CALL ADD_FEELING(ARG:0, -10)
	SIF ARG:0 != 1
		CALL CHANGE_TP(1, 20)
	SIF FLAG:10 != 0 && ARG:0 != FLAG:10
		CALL CHANGE_TP(FLAG:10, 20)
	SIF FLAG:11 != 0 && ARG:0 != FLAG:11
		CALL CHANGE_TP(FLAG:11, 20)
	CALL SHOW_TUTORIAL(12)
ENDIF
;HP用途拡張パッチここまで

;PTの「達」表示用
@TACHI
#FUNCTIONS
IF FLAG:10
	RETURNF "達"
ELSE
	RETURNF ""
ENDIF


;味方の中から１人を選択
;ARG:0	指定した状態異常のキャラを除外
;RETURN	選んだキャラのID　0ならキャンセル
@SELECT_PT_TARGET(ARG:0)
;LOCAL
;0		LOOP
;1-3	対象キャラが選択可能かどうか
;4		TEMP

FOR LOCAL:0, 1, 4
	LOCAL:(LOCAL:0) = 0
NEXT

IF CFLAG:1:(ARG:0) == 0
	LOCAL:1 = 1
	LOCAL:4 = 1
	PRINTFORML [1] %CALLNAME:1, 14, LEFT% HP {BASE:(LOCAL:4):0, 5}/{MAXBASE:(LOCAL:4):0, 5} MP {BASE:(LOCAL:4):1, 5}/{MAXBASE:(LOCAL:4):1, 5} EP {BASE:(LOCAL:4):2, 5}/{MAXBASE:(LOCAL:4):2, 5} CP {BASE:(LOCAL:4):3, 5}/{MAXBASE:(LOCAL:4):3, 5} TP {BASE:(LOCAL:4):4,3}
	PRINTFORM                    
	CALL PRINT_CONDITION(LOCAL:4)
	PRINTFORML 
ENDIF
IF FLAG:10
	IF CFLAG:(FLAG:10):(ARG:0) == 0
		LOCAL:2 = (FLAG:10)
		LOCAL:4 = (FLAG:10)
		PRINTFORML [2] %CALLNAME:(FLAG:10), 14, LEFT% HP {BASE:(LOCAL:4):0, 5}/{MAXBASE:(LOCAL:4):0, 5} MP {BASE:(LOCAL:4):1, 5}/{MAXBASE:(LOCAL:4):1, 5} EP {BASE:(LOCAL:4):2, 5}/{MAXBASE:(LOCAL:4):2, 5} CP {BASE:(LOCAL:4):3, 5}/{MAXBASE:(LOCAL:4):3, 5} TP {BASE:(LOCAL:4):4,3}
		PRINTFORM                    
		CALL PRINT_CONDITION(LOCAL:4)
		PRINTFORML 
	ENDIF
ENDIF
IF FLAG:11
	IF CFLAG:(FLAG:11):(ARG:0) == 0
		LOCAL:3 = (FLAG:11)
		LOCAL:4 = (FLAG:11)
		PRINTFORML [3] %CALLNAME:(FLAG:11), 14, LEFT% HP {BASE:(LOCAL:4):0, 5}/{MAXBASE:(LOCAL:4):0, 5} MP {BASE:(LOCAL:4):1, 5}/{MAXBASE:(LOCAL:4):1, 5} EP {BASE:(LOCAL:4):2, 5}/{MAXBASE:(LOCAL:4):2, 5} CP {BASE:(LOCAL:4):3, 5}/{MAXBASE:(LOCAL:4):3, 5} TP {BASE:(LOCAL:4):4,3}
		PRINTFORM                    
		CALL PRINT_CONDITION(LOCAL:4)
		PRINTFORML 
	ENDIF
ENDIF

PRINTFORML [0] キャンセル

$INPUT_LOOP
INPUT

IF RESULT == 0
	RETURN 0
ELSEIF LOCAL:(RESULT)
	RETURN LOCAL:(RESULT)
ELSE
	REUSELASTLINE 入力値が不正です。再入力してください
	GOTO INPUT_LOOP
ENDIF



;味方の中から１人を選択(大きいバージョン)
;ARG:0	指定した状態異常のキャラを除外、-1ならふたなり化不可能なキャラを除外
;RETURN	選んだキャラのID　0ならキャンセル
@SELECT_PT_TARGET2(ARG:0)
;LOCAL
;0		LOOP
;1-3	対象キャラが選択可能かどうか
;4		TEMP

FOR LOCAL:0, 1, 4
	LOCAL:(LOCAL:0) = 0
NEXT

IF ARG:0 == -1
	IF FLAG:520 == 1 || FLAG:520 == 2
		LOCAL:1 = 1
	ENDIF
	IF FLAG:520 == 1 || FLAG:520 == 3
		LOCAL:2 = FLAG:10
		LOCAL:3 = FLAG:11
	ENDIF
	IF LOCAL:1 + LOCAL:2 + LOCAL:3 == 0
		PRINTFORML 与えられるキャラクターがいません
	ENDIF
ELSE
	IF CFLAG:1:(ARG:0) == 0
		LOCAL:1 = 1
	ENDIF
	IF FLAG:10 && CFLAG:(FLAG:10):(ARG:0) == 0
		LOCAL:2 = FLAG:10
	ENDIF
	IF FLAG:11 && CFLAG:(FLAG:11):(ARG:0) == 0
		LOCAL:3 = FLAG:11
	ENDIF
ENDIF

IF LOCAL:1
	PRINTFORM [1] 
	CALL SHOW_SIMPLE_STATUS(1)
ENDIF
IF LOCAL:2
	PRINTFORM [2] 
	CALL SHOW_SIMPLE_STATUS(FLAG:10)
ENDIF
IF LOCAL:3
	PRINTFORM [3] 
	CALL SHOW_SIMPLE_STATUS(FLAG:11)
ENDIF
PRINTL [0] 戻る
$INPUT_LOOP
INPUT

IF RESULT == 0
	RETURN 0
ELSEIF LOCAL:(RESULT)
	RETURN LOCAL:(RESULT)
ELSE
	REUSELASTLINE 入力値が不正です。再入力してください
	GOTO INPUT_LOOP
ENDIF



;メッセージスキップ処理
;ARG:0	スキップレベル
@MSG_WAIT(ARG:0)
SIF FLAG:504 < ARG:0
	WAIT


;PT内に居るかどうかチェック
;ARG:0	対象キャラ
@IN_PT(ARG:0)
#FUNCTION

SIF ARG:0 == 0
	RETURNF 0

IF ARG:0 == 1 || ARG:0 == FLAG:10 || ARG:0 == FLAG:11
	RETURNF 1
ELSE
	RETURNF 0
ENDIF

;指定した部屋に指定した種族の敵が居るかどうかを判定
;ARG:0	部屋
;ARG:1	敵種族　引数が無かったときは指定した部屋に敵がいるかどうか
;RETURN	居る場合、先頭の敵ID
@CHECK_ENEMY_EXIST(ARG:0, ARG:1 = 0)
#FUNCTION

FOR LOCAL:0, 1, FLAG:1
	IF DA:(LOCAL:0):4 == ARG:0 && ( DA:(LOCAL:0):0 == ARG:1 || ARG:1 == 0 ) && ( DA:(LOCAL:0):0 != 18 || ARG:1 == 18 )
		RETURNF LOCAL:0
	ENDIF
NEXT

RETURNF 0

;指定した部屋にいる敵を取得する
;ARG:0		部屋
;敵キャラ数	この変数が参照している変数に敵キャラ数を変えす
;一番強い敵	この変数が参照している変数に一番強い敵の番号を変えす
@GET_ENEMY_EXIST(ARG:0, 敵キャラ数, 一番強い敵)
#DIM REF 敵キャラ数
#DIM REF 一番強い敵

FOR LOCAL:0, 1, FLAG:1
	IF DA:(LOCAL:0):4 == ARG:0 && DA:(LOCAL:0):0 != 18
		敵キャラ数++
		IF 一番強い敵 == 0 || GET_ENEMY_POWER(一番強い敵) < GET_ENEMY_POWER(LOCAL:0)
			一番強い敵 = LOCAL:0
		ENDIF
	ENDIF
NEXT


;指定した部屋に指定した番号の味方がいるかどうかを判定
;ARG;0	部屋
;ARG:1	味方ID　引数が無かったら指定した部屋に味方がいるかどうか
;RETURN	いるばあい、先頭の味方ID ドッペルだった場合・・・どうしようかね
@CHECK_CHARA_EXIST(ARG:0, ARG:1 = 0)
#FUNCTION

FOR LOCAL:0, 1, CHARANUM
	IF CFLAG:(LOCAL:0):4 == ARG:0 && ( LOCAL:0 == ARG:1 || ARG:1 == 0 )
		RETURNF LOCAL:0
	ENDIF
NEXT

FOR LOCAL:0, 1, FLAG:1
	IF DA:(LOCAL:0):4 == ARG:0 && DA:(LOCAL:0):0 == 18
		IF ( GET_DOPPEL_BASE(LOCAL:0) == ARG:1 ) || ( ARG:1 == 0 )
			RETURNF GET_DOPPEL_BASE(LOCAL:0)
		ENDIF
	ENDIF
NEXT

RETURNF 0

;指定した部屋にいる味方を取得する
;ARG:0			部屋
;味方キャラ数	この変数が参照している変数に味方キャラ数を変えす
;一番若い味方	この変数が参照している変数に一番番号が若い味方の番号を変えす　決して年齢ではない
@GET_CHARA_EXIST(ARG:0, 味方キャラ数, 一番若い味方)
#DIM REF 味方キャラ数
#DIM REF 一番若い味方

FOR LOCAL:0, 1, CHARANUM
	IF CFLAG:(LOCAL:0):4 == ARG:0
		味方キャラ数++
		IF 一番若い味方 == 0
			一番若い味方 = LOCAL:0
		ENDIF
	ENDIF
NEXT

FOR LOCAL:0, 1, FLAG:1
	IF DA:(LOCAL:0):4 == ARG:0 && DA:(LOCAL:0):0 == 18
		味方キャラ数++
		IF 一番若い味方 == 0
			一番若い味方 = GET_DOPPEL_BASE(LOCAL:0)
		ENDIF
	ENDIF
NEXT

;敵の強さとNPCの強さを比較する関数　要改良
;ARG:0	NPCのID
;ARG:1	敵のID
@COMPARE_POWER(ARG:0, ARG:1)
#FUNCTION

IF ( ARG:0 <= 1 || CHARANUM <= ARG:0 ) || ( ARG:1 <= 0 || FLAG:1 <= ARG:1 )
	PRINTFORML "引数がおかしいよ COMMON.ERBの@COMPARE_POWER ARG:0={ARG:0} ARG:1={ARG:1}"
	RETURNF -1
ENDIF


;NPCのほうが強かったら1を返す
IF GET_NPC_POWER(ARG:0) >= GET_ENEMY_POWER(ARG:1)
	RETURNF 1
ELSE
	RETURNF 0
ENDIF

;NPCの強さを勝手に決めつける関数　要改良
;ARG:0	NPCのID
@GET_NPC_POWER(ARG:0)
#function
#DIM 弾幕戦闘攻撃力
#DIM 道具戦闘攻撃力
#DIM 戦闘攻撃力
#DIM 速さ
#DIM 体力
#DIM 体力割合
#DIM 精神力割合
#DIM NPC強さ


IF ARG:0 <= 1 || CHARANUM <= ARG:0
	PRINTFORML "引数がおかしいよ COMMON.ERBのGET_NPC_POWER ARG:0={ARG:0}"
	RETURNF -1
ENDIF

弾幕戦闘攻撃力 = ABL:(ARG:0):98
IF ABL:(ARG:0):3 == 0
	弾幕戦闘攻撃力 += 0
ELSEIF ABL:(ARG:0):3 == 1
	弾幕戦闘攻撃力 = 弾幕戦闘攻撃力 * 11 / 10 + 5
ELSEIF ABL:(ARG:0):3 == 2
	弾幕戦闘攻撃力 = 弾幕戦闘攻撃力 * 25 / 20 + 13
ELSE
	弾幕戦闘攻撃力 = 弾幕戦闘攻撃力 * 15 / 10 + 25
ENDIF

弾幕戦闘攻撃力 += CFLAG:(ARG:0):120


道具戦闘攻撃力 = ABL:(ARG:0):98 / 2 + 25
IF ABL:(ARG:0):0 == 0
	道具戦闘攻撃力 += 0
ELSEIF ABL:(ARG:0):0 == 1
	道具戦闘攻撃力 += 5
ELSEIF ABL:(ARG:0):0 == 2
	道具戦闘攻撃力 += 10
ELSE
	道具戦闘攻撃力 += 15
ENDIF
IF ABL:(ARG:0):4 == 0
	道具戦闘攻撃力 += 0
ELSEIF ABL:(ARG:0):4 == 1
	道具戦闘攻撃力 = 道具戦闘攻撃力 * 11 / 10 + 5
ELSEIF ABL:(ARG:0):4 == 2
	道具戦闘攻撃力 = 道具戦闘攻撃力 * 25 / 20 + 10
ELSE
	道具戦闘攻撃力 = 道具戦闘攻撃力 * 15 / 10 + 15
ENDIF

道具戦闘攻撃力 += CFLAG:(ARG:0):121


IF 弾幕戦闘攻撃力 >= 道具戦闘攻撃力
	戦闘攻撃力 = 弾幕戦闘攻撃力
ELSE
	戦闘攻撃力 = 道具戦闘攻撃力
ENDIF


速さ = ABL:(ARG:0):97


体力 = BASE:(ARG:0):0

体力割合 = BASE:(ARG:0):0 * 100 / MAXBASE:(ARG:0):0


精神力割合 = BASE:(ARG:0):1 * 100 / MAXBASE:(ARG:0):1


NPC強さ = ( 戦闘攻撃力 * 3 + 体力 ) * 体力割合 / 100 * 精神力割合 /100


RETURNF (NPC強さ)

;敵の強さを勝手に決めつける関数　要改良
;ARG:0	敵のID
@GET_ENEMY_POWER(ARG:0)
#FUNCTION
#DIM 戦闘攻撃力
#DIM 速さ
#DIM 体力
#DIM 敵強さ

IF ARG:0 <= 0 || FLAG:0 <= ARG:1
	PRINTFORML "引数がおかしいよ COMMON.ERBの@GET_ENEMY_POWER ARG:0={ARG:0}"
	RETURNF -1
ENDIF

戦闘攻撃力 = DA:(ARG:0):5 * 11 / 2

速さ = DA:(ARG:0):9

体力 = DA:(ARG:0):1

敵強さ = 戦闘攻撃力 + 体力

RETURNF (敵強さ)

;CSVの数を返す
@GET_CSVCHARA

FOR LOCAL:0, 0, 300
	;CSVがあったら続けるなければそこで終了
	EXISTCSV LOCAL:0
	IF RESULT
		
	ELSE
		BREAK
	ENDIF
NEXT

;出て来るLOCAL:0はBREAKでも+1されるので合計-2する
FLAG:2 = LOCAL:0 - 2


;0以上ARG未満の被らない乱数のリストを生成し、呼ぶたびに要素を順に返す。
;末尾まで達していたりARG<0なら-1を返す。
;前と別のARGを渡したらリストを再編成。
;例: --->
;ARG 10 10 10 10 10  3  3  3  3  3 -1 -1  7  7
;RET  7  9  0  8  6  2  0  1 -1 -1 -1 -1  6  4
@UNIQUE_RANDOM(ARG)
#FUNCTION
#DIM RAND_LIST, 10000 ;生成した乱数列のリスト
#DIM INDEX            ;何番目の要素まで返したか
#DIM LCOUNT           ;ループカウンタ
#DIM DEST             ;SWAPを行う対象
#DIM LAST_ARG         ;前のARG

IF ARG < 0
	LAST_ARG = ARG
	RETURNF -1
ENDIF

;乱数列生成
IF ARG != LAST_ARG
	INDEX = -1
	VARSET RAND_LIST, -1
	;まず0,1,...,ARG-1の列を作る
	FOR LCOUNT, 0, ARG
		RAND_LIST:LCOUNT = LCOUNT
	NEXT
	;先頭から、「今見ている数値とそれより右の数値を交換する」ことを順に行う
	FOR LCOUNT, 0, ARG
		DEST = LCOUNT + RAND:(ARG - LCOUNT)
		SWAP RAND_LIST:LCOUNT, RAND_LIST:DEST
	NEXT
ENDIF

LAST_ARG = ARG
;乱数を返す処理
INDEX++
RETURNF RAND_LIST:INDEX
