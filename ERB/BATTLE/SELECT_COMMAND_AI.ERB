; AIによるコマンド選択
@SELECT_COMMAND_AI
#DIM LCOUNT
#DIM ACTIVE_CHARA_ID, 3
	
	; AIの行動順を決定、補正値込みの行動速度が早い順に
	ACTIVE_CHARA_ID = 1, FLAG:10, FLAG:11
	CALL SORT_CHARA_ID_BY_SPEED(ACTIVE_CHARA_ID)
	
	; キャラクタ別、行動決定
	; 行動決定後AIモードに変更されている可能性があるので、AIモードなら決定済行動も上書きする
	FOR LCOUNT, 0, 3
		; n人目のPTメンバーは居ない
		SIF !ACTIVE_CHARA_ID:LCOUNT
			CONTINUE
		
		; 戦闘コマンド選択不可状態
		SIF !IS_POSSIBLE_BATTLE_ACTION(ACTIVE_CHARA_ID:LCOUNT)
			CONTINUE
		
		; アクティブキャラはAI戦闘無効 直接指示で行動
		SIF !CFLAG:(ACTIVE_CHARA_ID:LCOUNT):122
			CONTINUE
			
		; 逃げる(催眠時含む)・拘束から離脱・諦めコマンド確定時はAI処理無効
		SIF GROUPMATCH(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):50, 5, 42, 44, 75)
			CONTINUE
		
		; 煙玉を使った逃走が確定時AI処理無効
		SIF CFLAG:(ACTIVE_CHARA_ID:LCOUNT):50 == 2 && CFLAG:(ACTIVE_CHARA_ID:LCOUNT):54 == 59
			CONTINUE
			
		; AI処理記述部
		[IF AI_BATTLE_DEBUG]
			PRINTFORML %CALLNAME:(ACTIVE_CHARA_ID:LCOUNT)%の行動定義
		[ENDIF]
		CALL AUTO_SETTING_AI_COMMAND(ACTIVE_CHARA_ID:LCOUNT)
		[IF AI_BATTLE_DEBUG]
			IF CFLAG:(ACTIVE_CHARA_ID:LCOUNT):50 == 2
				PRINTFORML %CALLNAME:(ACTIVE_CHARA_ID:LCOUNT)%の決定行動：%ITEMNAME:(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):54)%
			ELSE
				PRINTFORML %CALLNAME:(ACTIVE_CHARA_ID:LCOUNT)%の決定行動：%SKILLNAME(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):50)%
			ENDIF
			DRAWLINE
		[ENDIF]
	NEXT
RETURN


; 戦闘コマンド自動設定
; 実行可能な全てのコマンド、全ての対象を登録・選別する
@AUTO_SETTING_AI_COMMAND(CHARA_ID)
#DIM LCOUNT
#DIM CHARA_ID
#DIM COMMAND_NODE, 1000, 3 ; 比較用ノード ノード番号, (コマンド番号, 対象ID, 補助値)
#DIM COMMAND_NODE_COUNT
#DIM COMMAND_NODE_RATE, 1000

	VARSET COMMAND_NODE
	VARSET COMMAND_NODE_RATE
	VARSET COMMAND_NODE_COUNT
	
	; 01 防御
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 1, CHARA_ID

	; 02 アイテム 握り飯(50)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, 1, 50
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:10, 50
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:11, 50
	
	; 02 アイテム 太巻き(51)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, 1, 51
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:10, 51
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:11, 51
	
	; 02 アイテム エナジードリンク(52)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, 1, 52
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:10, 52
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:11, 52
	
	; 02 アイテム 回復ポーション(53)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, 1, 53
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:10, 53
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:11, 53
	
	; 02 アイテム 着替えセット(54)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, 1, 54
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:10, 54
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:11, 54
	
	; 02 アイテム 鎮静剤(55)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, 1, 55
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:10, 55
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:11, 55
	
	; 02 アイテム 興奮剤(56)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, 1, 56
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:10, 56
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:11, 56
	
	; 02 アイテム 治療ポーション(57)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, 1, 57
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:10, 57
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:11, 57
	
	; 02 アイテム 気付け薬(58)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, 1, 58
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:10, 58
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, FLAG:11, 58
	
	; 02 アイテム 浄化玉(71)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 2, CHARA_ID, 71
	
	; 03 前に出る
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 3, CHARA_ID
	
	; 04 元に戻る
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 4, CHARA_ID
	
	; 05 逃げる(AI選択不可)
	
	; 08 緊急浄化
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 8, 1
	
	; 10 弱攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 10, TFLAG:LCOUNT
	NEXT
	
	; 11 中攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 11, TFLAG:LCOUNT
	NEXT
	
	; 12 強攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 12, TFLAG:LCOUNT
	NEXT
	
	; 13 溜め攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 13, TFLAG:LCOUNT
	NEXT
	
	; 14 ばら撒き弾
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 14, TFLAG:LCOUNT
	NEXT
	
	; 15 貫通弾
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 15, 1
	
	; 19 霊撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 19, TFLAG:LCOUNT
	NEXT
	
	; 20 弱攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 20, TFLAG:LCOUNT, 120
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 20, TFLAG:LCOUNT, 220
	NEXT
	
	; 21 中攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 21, TFLAG:LCOUNT, 121
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 21, TFLAG:LCOUNT, 221
	NEXT
	
	; 22 強攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 22, TFLAG:LCOUNT, 122
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 22, TFLAG:LCOUNT, 222
	NEXT
	
	; 23 節約攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 23, TFLAG:LCOUNT, 123
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 23, TFLAG:LCOUNT, 223
	NEXT
	
	; 24 みだれうち
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 24, 1, 124
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 24, 1, 224
	
	; 25 一点集中
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 25, TFLAG:LCOUNT, 125
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 25, TFLAG:LCOUNT, 225
	NEXT
	
	; 30 弱攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 30, TFLAG:LCOUNT, 130
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 30, TFLAG:LCOUNT, 230
	NEXT
	
	; 31 中攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 31, TFLAG:LCOUNT, 131
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 31, TFLAG:LCOUNT, 231
	NEXT
	
	; 32 強攻撃
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 32, TFLAG:LCOUNT, 132
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 32, TFLAG:LCOUNT, 232
	NEXT
	
	; 33 下段狙い
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 33, TFLAG:LCOUNT, 133
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 33, TFLAG:LCOUNT, 233
	NEXT
	
	; 34 急所狙い
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 34, TFLAG:LCOUNT, 134
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 34, TFLAG:LCOUNT, 234
	NEXT
	
	; 35 カウンター
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 35, CHARA_ID, 135
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 35, CHARA_ID, 235
	
	; 42 脱出を試みる
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 42, 0
	
	; 43 力を溜める
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 43, 0
	
	; 44 諦める(プレイヤー専用スキル扱い AIが勝手に戦闘を打ち切らないように)
	
	; 50 尻を守る
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 50, 0
	
	; 51 胸を守る
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 51, 0
	
	; 52 ペニスを守る/クリを守る
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 52, 0
	
	; 53 性交を防ぐ
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 53, 0
	
	; 54-58 おねだり(ランダムで部位を1つだけ登録)
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = (54 + RAND:5), 0
	
	; 60 使う
	; 61 使う
	
	; 71 平常行動
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 71, CHARA_ID
	
	; 72 自慰
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 72, CHARA_ID
	
	; 73 仲間を襲う
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 73, CHARA_ID
	
	; 74 着替える
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 74, CHARA_ID
	
	; 75 逃げる
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 75, CHARA_ID
	
	; 76 安眠
	COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 76, CHARA_ID
	
	; 77 精神抵抗(廃止)
	
	; 80 踏む
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 80, TFLAG:LCOUNT
	NEXT
	
	; 81 ビンタ
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 81, TFLAG:LCOUNT
	NEXT
	
	; 82 折る
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 82, TFLAG:LCOUNT
	NEXT
	
	; 83 キス
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 83, TFLAG:LCOUNT
	NEXT
	
	; 84 手淫
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 84, TFLAG:LCOUNT
	NEXT
	
	; 85 フェラチオ
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 85, TFLAG:LCOUNT
	NEXT
	
	; 86 パイズリ
	FOR LCOUNT, 1, TFLAG:15 + 1
		COMMAND_NODE:(COMMAND_NODE_COUNT++):0 = 86, TFLAG:LCOUNT
	NEXT
	
	; 95 発情抱きつき(選択不可コマンド)
	; 96 発情抱きつかれ(選択不可コマンド)
	
	; 登録した全コマンドの優先度を読み込む
	FOR LCOUNT, 0, COMMAND_NODE_COUNT
		; 読み込む際に実行可能か判定を行う 実行不可なら優先度0
		IF INRANGE(COMMAND_NODE:LCOUNT:0, 20, 35)
			IF !IS_BATTLE_COMMAND(CHARA_ID, COMMAND_NODE:LCOUNT:2)
				COMMAND_NODE_RATE:LCOUNT = 0
				CONTINUE
			ENDIF
		ELSEIF !IS_BATTLE_COMMAND(CHARA_ID, COMMAND_NODE:LCOUNT:0)
			COMMAND_NODE_RATE:LCOUNT = 0
			CONTINUE
		ENDIF
		
		; 実行可能なら各コマンドの優先度を取得する 関数がなければ優先度0
		TRYCCALLFORM GET_COMMAND_EXECUTION_RATE_{COMMAND_NODE:LCOUNT:0}(CHARA_ID, COMMAND_NODE:LCOUNT:1, COMMAND_NODE:LCOUNT:2)
			; 毎回結果が固定されないよう取得優先度は上下5.00%程度ブレる
			COMMAND_NODE_RATE:LCOUNT = LIMIT(RESULT + RAND:500 - RAND:500, 0, 10000)
			; 毎ターン同一行動をすると味気ないので前回選択コマンドと同一コマンドの場合優先度を下げる
			SIF COMMAND_NODE:LCOUNT:0 == CFLAG:CHARA_ID:101 || COMMAND_NODE:LCOUNT:0 == CFLAG:CHARA_ID:101
				TIMES COMMAND_NODE_RATE:LCOUNT, 0.8
			[IF AI_BATTLE_DEBUG]
				IF RESULT
					IF COMMAND_NODE:LCOUNT:0 == 2
						PRINTFORML %CALLNAME:CHARA_ID, 14, LEFT%：%ITEMNAME:(COMMAND_NODE:LCOUNT:2), 16, LEFT%を登録しました 優先度：{(COMMAND_NODE_RATE:LCOUNT / 100), 3, RIGHT}.{(COMMAND_NODE_RATE:LCOUNT % 100), 2, LEFT}　対象：{COMMAND_NODE:LCOUNT:1}
					ELSE
						PRINTFORML %CALLNAME:CHARA_ID, 14, LEFT%：%SKILLNAME(COMMAND_NODE:LCOUNT:0), 16, LEFT%を登録しました 優先度：{(COMMAND_NODE_RATE:LCOUNT / 100), 3, RIGHT}.{(COMMAND_NODE_RATE:LCOUNT % 100), 2, LEFT}　対象：{COMMAND_NODE:LCOUNT:1}
					ENDIF
				ENDIF
			[ENDIF]
		CATCH
			COMMAND_NODE_RATE:LCOUNT = 0
		ENDCATCH
	NEXT
	
	; 優先度を参照して実行するコマンドを決定
	; 比較しながらSWAPで一番上に実行コマンドを持ってくる
	; 同値の場合はランダムでどちらかが上に
	FOR LCOUNT, COMMAND_NODE_COUNT, 0, -1
		IF (COMMAND_NODE_RATE:(LCOUNT - 1) < COMMAND_NODE_RATE:LCOUNT) || (COMMAND_NODE_RATE:(LCOUNT - 1) == COMMAND_NODE_RATE:LCOUNT && RAND:2)
			SWAP COMMAND_NODE_RATE:(LCOUNT - 1), COMMAND_NODE_RATE:LCOUNT
			SWAP COMMAND_NODE:(LCOUNT - 1):0, COMMAND_NODE:LCOUNT:0
			SWAP COMMAND_NODE:(LCOUNT - 1):1, COMMAND_NODE:LCOUNT:1
			SWAP COMMAND_NODE:(LCOUNT - 1):2, COMMAND_NODE:LCOUNT:2
		ENDIF
	NEXT
	
	; コマンド確定
	IF COMMAND_NODE_RATE:0 != 0
		CFLAG:CHARA_ID:50 = COMMAND_NODE:0:0
		CFLAG:CHARA_ID:51 = COMMAND_NODE:0:1
		SIF COMMAND_NODE:0:0 == 2
			CFLAG:CHARA_ID:54 = COMMAND_NODE:0:2
	
	; 選択可能コマンドがないと優先度0の不特定コマンドが登録されてしまうので対策
	ELSE
		[IF AI_BATTLE_DEBUG]
			PRINTFORML 自動選択コマンドがありません 基本コマンドを登録します
		[ENDIF]
		; キャラの状態によって利用可能コマンドが変化するので分岐
		; 催眠状態
		IF CFLAG:CHARA_ID:43
			; 平常行動
			CFLAG:CHARA_ID:50 = 71
			CFLAG:CHARA_ID:51 = CHARA_ID
		; 拘束中
		ELSEIF CFLAG:CHARA_ID:10 || CFLAG:CHARA_ID:20
			; 脱出を試みる
			CFLAG:CHARA_ID:50 = 42
			CFLAG:CHARA_ID:51 = 0
		; 通常時
		ELSE
			; 残った敵の先頭に中攻撃
			CFLAG:CHARA_ID:50 = 11
			FOR LCOUNT, 1, TFLAG:15 + 1
				IF TFLAG:LCOUNT && DA:(TFLAG:LCOUNT):1 > 0
					CFLAG:CHARA_ID:51 = LCOUNT
					BREAK
				ENDIF
			NEXT
		ENDIF
	ENDIF
RETURN

; 行動可能キャラ全員がAI処理の場合、専用のコマンド入力
@SELECT_COMMAND_ALL_AI
#DIM LCOUNT
#DIM ACTIVE_CHARA_ID, 3
#DIM IS_ESCAPE
	
	; 既に諦め済みの場合は諦めコマンド固定
	IF TFLAG:16 == 2
		ACTIVE_CHARA_ID = 1, FLAG:10, FLAG:11
		FOR LCOUNT, 0, 3
			SIF !ACTIVE_CHARA_ID:LCOUNT
				CONTINUE
			CFLAG:(ACTIVE_CHARA_ID:LCOUNT):50 = 44
		NEXT
		RETURN 1
	ENDIF
	
	; 逃走可能チェック
	; だれか一人でも通常行動可能 & 非拘束状態なら逃げる事が可能(催眠中はコマンドが書き換わるが逃げることは可能)
	IF (IS_POSSIBLE_BATTLE_ACTION(1) && !CFLAG:1:20) || (FLAG:10 && IS_POSSIBLE_BATTLE_ACTION(FLAG:10) && !CFLAG:(FLAG:10):20) || (FLAG:11 && IS_POSSIBLE_BATTLE_ACTION(FLAG:11) && !CFLAG:(FLAG:11):20)
		IS_ESCAPE = 1
	ELSE
		IS_ESCAPE = 0
	ENDIF
	
	PRINTFORML 行動可能なキャラクターは全員自動行動中です
	PRINTFORML
	IF IS_ESCAPE
		PRINTFORMLC [ 5] %SKILLNAME(5)%
	ELSE
		SETCOLOR 0x333333
		PRINTFORMLC [--] %SKILLNAME(5)%
		RESETCOLOR
	ENDIF
	
	; 諦め表示は可能時のみ
	IF TFLAG:16 == 1
		PRINTFORMLC [44] %SKILLNAME(44)%
	ENDIF
	
	PRINTFORML
	PRINTFORMLC [ 6] REPEAT
	PRINTFORMLC [ 7] AUTO REPEAT
	PRINTFORML
	PRINTFORMLC [98] 図鑑を確認する
	PRINTFORMLC [99] 作戦を変更
	
	$INPUT_LOOP
	
	IF FLAG:AUTOMODE
		TINPUT FLAG:AUTOMODE * 200 , 6, 0, ""
	ELSE
		INPUT
	ENDIF
	
	SELECTCASE RESULT
	; 逃げる
	CASE 5
		IF IS_ESCAPE
			; 逃げる確認
			; 誰かが拘束されているなら警告
			IF CFLAG:1:20 || (FLAG:10 && CFLAG:(FLAG:10):20) || (FLAG:11 && CFLAG:(FLAG:11):20)
				SETCOLOR 0xEEEE10
				PRINTFORML ※拘束されている味方を見捨てて逃げることになります！
				RESETCOLOR
				PRINTFORML 本当に逃げますか？
				CALL ASK_YN
				; 逃げないならコマンド選択やりなおし
				IF RESULT == 1
					RETURN -1
				ENDIF
			ENDIF
			
			; 逃走処理 状態によって実行するコマンドが異なる
			; 行動速度の早い順に処理
			ACTIVE_CHARA_ID = 1, FLAG:10, FLAG:11
			CALL SORT_CHARA_ID_BY_SPEED(ACTIVE_CHARA_ID)
			FOR LCOUNT, 0, 3
				SIF !ACTIVE_CHARA_ID:LCOUNT
					CONTINUE
					
				; 催眠中 催眠中コマンドの逃げるが実行される
				IF CFLAG:(ACTIVE_CHARA_ID:LCOUNT):43
					CFLAG:(ACTIVE_CHARA_ID:LCOUNT):50 = 75
					CFLAG:(ACTIVE_CHARA_ID:LCOUNT):51 = 0
					
				; 拘束中 運に任せて拘束から離脱 逃げる味方より早く離脱に成功すれば一緒に逃げられる
				ELSEIF CFLAG:(ACTIVE_CHARA_ID:LCOUNT):20
					CFLAG:(ACTIVE_CHARA_ID:LCOUNT):50 = 42
					CFLAG:(ACTIVE_CHARA_ID:LCOUNT):51 = 0
				
				; 通常時 喪失などのコマンド入力不可状態なら、後で自動的にコマンド書き換えが行われるので統一処理
				ELSE
					CFLAG:(ACTIVE_CHARA_ID:LCOUNT):50 = 5
					CFLAG:(ACTIVE_CHARA_ID:LCOUNT):51 = 0
					
					; 逃走成功率が低い場合、ランダムで煙玉使用に書き換える
					; 使用率は成功率が低いほど高め
					IF GET_ESCAPE_RATE(ACTIVE_CHARA_ID:LCOUNT) <= 50 && CHECK_STOCK_ITEM(59)
						IF RAND:(100 - GET_ESCAPE_RATE(ACTIVE_CHARA_ID:LCOUNT))
							CFLAG:(ACTIVE_CHARA_ID:LCOUNT):50 = 2
							CFLAG:(ACTIVE_CHARA_ID:LCOUNT):51 = ACTIVE_CHARA_ID:LCOUNT
							CFLAG:(ACTIVE_CHARA_ID:LCOUNT):54 = 59
						ENDIF
					ENDIF
					
				ENDIF
			NEXT
			RETURN 1
		ENDIF
		
	; REPEAT開始
	CASE 6
		TFLAG:17 = 1
		RETURN 1
		
	; AUTO REPEAT開始
	CASE 7
		TFLAG:17 = 2
		RETURN 1
		
	; 諦める
	CASE 44
		IF TFLAG:16 == 1
			; 諦めた瞬間口上を表示、その後諦めフラグを立ててコマンドを書き換える
			ACTIVE_CHARA_ID = 1, FLAG:10, FLAG:11
			CALL SORT_CHARA_ID_BY_SPEED(ACTIVE_CHARA_ID)
			FOR LCOUNT, 0, 3
				SIF !ACTIVE_CHARA_ID:LCOUNT
					CONTINUE
					
				; 最優先で主人公、主人公が無理なら最速行動可能キャラの諦め口上を表示する
				IF IS_BATTLE_COMMAND(ACTIVE_CHARA_ID:LCOUNT, 44)
					IF IS_BATTLE_COMMAND(1, 44)
						IF !CFLAG:1:20 && CFLAG:1:10
							CALL PRINT_MESSAGE(1, 1, 44, CALLNAME:1, SAVESTR:(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):10), 0, DA:(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):10):0)
						ELSE
							CALL PRINT_MESSAGE(1, 1, 44, CALLNAME:1, SAVESTR:(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):20), 0, DA:(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):20):0)
						ENDIF
					ELSE
						IF !CFLAG:(ACTIVE_CHARA_ID:LCOUNT):20 && CFLAG:(ACTIVE_CHARA_ID:LCOUNT):10
							CALL PRINT_MESSAGE(ACTIVE_CHARA_ID:LCOUNT, 1, 44, CALLNAME:(ACTIVE_CHARA_ID:LCOUNT), SAVESTR:(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):10), 0, DA:(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):10):0)
						ELSE
							CALL PRINT_MESSAGE(ACTIVE_CHARA_ID:LCOUNT, 1, 44, CALLNAME:(ACTIVE_CHARA_ID:LCOUNT), SAVESTR:(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):20), 0, DA:(CFLAG:(ACTIVE_CHARA_ID:LCOUNT):20):0)
						ENDIF
					ENDIF
					TFLAG:16 = 2
					CFLAG:1:50 = 44
					SIF FLAG:10
						CFLAG:(FLAG:10):50 = 44
					SIF FLAG:11
						CFLAG:(FLAG:11):50 = 44
					RETURN 1
				ENDIF
			NEXT
		ENDIF
		
	;図鑑を確認
	CASE 98
		CALL SHOW_BATTLE_ENEMY_WIKI
		SIF RESULT
			WAIT
		RETURN -2
		
	; 作戦を変更
	CASE 99
		CALL SET_AI_BATTLE_CONFIG
		RETURN -2
	ENDSELECT
	
	REUSELASTLINE 入力値が不正です。再入力してください
	GOTO INPUT_LOOP
	
RETURN 1

; AI設定・命令の変更
@SET_AI_BATTLE_CONFIG
#DIM LCOUNT

	PRINTFORML
	DRAWLINE
	PRINTFORML 作戦の変更
	DRAWLINE
	
	FOR LCOUNT, 0, 3
		IF GET_MEMBER(LCOUNT)
			SELECTCASE CFLAG:(GET_MEMBER(LCOUNT)):122
			CASE 0
				PRINTFORML [{10 + LCOUNT}] %CALLNAME:(GET_MEMBER(LCOUNT)), 20, LEFT%手動行動
			CASE 1
				PRINTFORML [{10 + LCOUNT}] %CALLNAME:(GET_MEMBER(LCOUNT)), 20, LEFT%AI自動行動
			CASE 2
				PRINTFORML [{10 + LCOUNT}] %CALLNAME:(GET_MEMBER(LCOUNT)), 20, LEFT%このターンはおまかせ
			ENDSELECT
		ENDIF
	NEXT
	
	DRAWLINE
	PRINTFORMLC [ 0] 戻る
	
	$INPUT_LOOP
	INPUT
	
	SELECTCASE RESULT
	CASE 0
		RETURN
	CASE 10 TO 12
		IF CFLAG:(GET_MEMBER(RESULT - 10)):122 == 0
			CFLAG:(GET_MEMBER(RESULT - 10)):122 = 1
		ELSE
			CFLAG:(GET_MEMBER(RESULT - 10)):122 = 0
		ENDIF
		RESTART
	ENDSELECT
	
	REUSELASTLINE 入力値が不正です。再入力してください
	GOTO INPUT_LOOP
	
RETURN
